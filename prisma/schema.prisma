// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String    // Hashed password for authentication
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Dhukuti specific fields
  phoneNumber   String?
  address       String?
  emergencyContact String?
  isVerified    Boolean   @default(false)
  reputation    Int       @default(0)
  totalEarnings Decimal   @default(0) @db.Decimal(10, 2)
  totalContributions Int  @default(0)
  role          UserRole  @default(USER)

  // Relationships
  ownedGroups   Group[]   @relation("GroupOwner")
  memberships   GroupMember[]
  contributions Contribution[]
  transactions  Transaction[]
  activities    Activity[]
  messages      Message[]
  comments      Comment[]

  @@map("users")
}

model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  maxMembers  Int       @default(10)
  contributionAmount Decimal @db.Decimal(10, 2)
  cycleDuration Int     @default(30) // days
  startDate   DateTime?
  endDate     DateTime?
  status      GroupStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  ownerId     String
  owner       User      @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     GroupMember[]
  contributions Contribution[]
  transactions Transaction[]
  activities  Activity[]
  messages    Message[]

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  status    MemberStatus @default(ACTIVE)
  role      MemberRole @default(MEMBER)

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model Contribution {
  id          String    @id @default(cuid())
  amount      Decimal   @db.Decimal(10, 2)
  dueDate     DateTime
  paidDate    DateTime?
  status      ContributionStatus @default(PENDING)
  cycleNumber Int
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId      String
  groupId     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("contributions")
}

model Transaction {
  id          String    @id @default(cuid())
  amount      Decimal   @db.Decimal(10, 2)
  type        TransactionType
  description String?
  status      TransactionStatus @default(COMPLETED)
  createdAt   DateTime  @default(now())

  // Relationships
  userId      String
  groupId     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Activity {
  id          String    @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  metadata    Json?
  createdAt   DateTime  @default(now())

  // Relationships
  userId      String?
  groupId     String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  group       Group?    @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@map("activities")
}

model Message {
  id          String    @id @default(cuid())
  content     String
  messageType MessageType @default(TEXT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId      String
  groupId     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Enums
enum GroupStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  SUSPENDED
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum ContributionStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  CONTRIBUTION
  PAYOUT
  FEE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ActivityType {
  GROUP_CREATED
  MEMBER_JOINED
  MEMBER_LEFT
  CONTRIBUTION_PAID
  CONTRIBUTION_OVERDUE
  PAYOUT_DISTRIBUTED
  MESSAGE_SENT
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
} 